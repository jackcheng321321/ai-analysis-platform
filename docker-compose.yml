# AI综合分析管理平台 - 生产环境Docker编排配置
version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: ai-analysis-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ai_analysis_platform}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./数据库设计.sql:/docker-entrypoint-initdb.d/02-schema.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - ai-analysis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ai_analysis_platform}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存和消息队列
  redis:
    image: redis:7-alpine
    container_name: ai-analysis-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-your_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - ai-analysis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-analysis-backend
    environment:
      # 数据库配置
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-your_secure_password}@postgres:5432/${POSTGRES_DB:-ai_analysis_platform}
      
      # Redis配置
      REDIS_URL: redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
      
      # 应用配置
      SECRET_KEY: ${SECRET_KEY:-your_very_secret_key_here_change_in_production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your_encryption_key_32_chars_long}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Webhook配置
      WEBHOOK_BASE_URL: ${WEBHOOK_BASE_URL:-https://your-domain.com/api/v1/webhooks}
      
      # 文件处理配置
      MAX_FILE_SIZE_MB: ${MAX_FILE_SIZE_MB:-100}
      TEMP_DIR: /tmp/ai-analysis
      
      # AI模型配置
      DEFAULT_AI_TIMEOUT: ${DEFAULT_AI_TIMEOUT:-300}
      MAX_RETRIES: ${MAX_RETRIES:-3}
      
      # 安全配置
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,https://your-domain.com}
      RATE_LIMIT_PER_MINUTE: ${RATE_LIMIT_PER_MINUTE:-60}
    volumes:
      - ./backend/logs:/app/logs
      - /tmp/ai-analysis:/tmp/ai-analysis
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - ai-analysis-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker - 处理异步任务
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-analysis-celery-worker
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=4
    environment:
      # 继承backend的环境变量
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-your_secure_password}@postgres:5432/${POSTGRES_DB:-ai_analysis_platform}
      REDIS_URL: redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your_very_secret_key_here_change_in_production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your_encryption_key_32_chars_long}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      MAX_FILE_SIZE_MB: ${MAX_FILE_SIZE_MB:-100}
      DEFAULT_AI_TIMEOUT: ${DEFAULT_AI_TIMEOUT:-300}
      MAX_RETRIES: ${MAX_RETRIES:-3}
    volumes:
      - ./backend/logs:/app/logs
      - /tmp/ai-analysis:/tmp/ai-analysis
    networks:
      - ai-analysis-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.tasks.celery_app inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat - 定时任务调度器
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-analysis-celery-beat
    command: celery -A app.tasks.celery_app beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-your_secure_password}@postgres:5432/${POSTGRES_DB:-ai_analysis_platform}
      REDIS_URL: redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your_very_secret_key_here_change_in_production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - ai-analysis-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Flower - 任务监控界面
  celery-flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-analysis-celery-flower
    command: celery -A app.tasks.celery_app flower --port=5555
    environment:
      REDIS_URL: redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-flower_password}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    networks:
      - ai-analysis-network
    depends_on:
      - redis
    restart: unless-stopped

  # 前端Web应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8000/api/v1}
        VITE_APP_TITLE: ${VITE_APP_TITLE:-AI综合分析管理平台}
    container_name: ai-analysis-frontend
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - ai-analysis-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: ai-analysis-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    networks:
      - ai-analysis-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - nginx  # 使用 docker-compose --profile nginx up 启动

  # Prometheus监控（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-analysis-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - ai-analysis-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana仪表板（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: ai-analysis-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-grafana_password}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - ai-analysis-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  ai-analysis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# 使用说明:
# 1. 基础服务启动: docker-compose up -d
# 2. 包含Nginx: docker-compose --profile nginx up -d
# 3. 包含监控: docker-compose --profile monitoring up -d
# 4. 全部服务: docker-compose --profile nginx --profile monitoring up -d
# 5. 查看日志: docker-compose logs -f [service_name]
# 6. 停止服务: docker-compose down
# 7. 完全清理: docker-compose down -v --remove-orphans